import discord
from discord.ext import commands
from discord.ui import View, Button
import json
import os
import asyncio
import re
import random
from datetime import datetime, timezone
from dotenv import load_dotenv

# --- Configuration ---
load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
PREFIX = "!"
LOGS_FILE = "logs.json"
WARNS_FILE = "warns.json"

TICKET_CATEGORY_NAME = "Tickets support"
MAX_WARNS = 3


bad_words = ["mot1", "mot2", "mot3", "exemple"]

intents = discord.Intents.all()
intents.message_content = True

bot = commands.Bot(command_prefix=PREFIX, intents=intents, help_command=None)


anti_raid_enabled = False
user_last_message_times = {}

# --- Gestionnaires de Fichiers JSON ---
def init_logs():
    """Initialise le fichier JSON des logs s'il n'existe pas ou s'il est vide/corrompu."""
    if not os.path.exists(LOGS_FILE) or os.path.getsize(LOGS_FILE) == 0:
        with open(LOGS_FILE, "w", encoding="utf-8") as f:
            json.dump({"actions": []}, f, indent=4)
    else:
        try:
            with open(LOGS_FILE, "r", encoding="utf-8") as f:
                json.load(f)
        except json.JSONDecodeError:
            print(f"Warning: {LOGS_FILE} is corrupted. Reinitializing it.")
            with open(LOGS_FILE, "w", encoding="utf-8") as f:
                json.dump({"actions": []}, f, indent=4)

def init_warns():
    """Initialise le fichier JSON des avertissements s'il n'existe pas ou s'il est vide/corrompu."""
    if not os.path.exists(WARNS_FILE) or os.path.getsize(WARNS_FILE) == 0:
        with open(WARNS_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f, indent=4)
    else:
        try:
            with open(WARNS_FILE, "r", encoding="utf-8") as f:
                json.load(f)
        except json.JSONDecodeError:
            print(f"Warning: {WARNS_FILE} is corrupted. Reinitializing it.")
            with open(WARNS_FILE, "w", encoding="utf-8") as f:
                json.dump({}, f, indent=4)

def log_action(action_type, user, target=None, reason=None, duration=None, details=None):
    """Enregistre les actions de mod√©ration dans un fichier JSON."""
    init_logs()
    with open(LOGS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    entry = {
        "action": action_type,
        "moderator": str(user),
        "target": str(target) if target else None,
        "reason": reason,
        "duration": duration,
        "details": details,
        "timestamp": datetime.now(timezone.utc).isoformat()
    }
    data["actions"].append(entry)
    with open(LOGS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

# --- Fonctions du Syst√®me d'Avertissement ---
def load_warns():
    """Charge les donn√©es d'avertissement du fichier JSON."""
    init_warns()
    with open(WARNS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_warns(data):
    """Sauvegarde les donn√©es d'avertissement dans le fichier JSON."""
    with open(WARNS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

def add_warn(user_id, reason):
    """Ajoute un avertissement √† un utilisateur et retourne son nombre actuel d'avertissements."""
    warns = load_warns()
    user_id_str = str(user_id)
    warns.setdefault(user_id_str, []).append({"reason": reason, "timestamp": datetime.now(timezone.utc).isoformat()})
    save_warns(warns)
    return len(warns[user_id_str])

def reset_warns(user_id):
    """R√©initialise tous les avertissements d'un utilisateur sp√©cifique."""
    warns = load_warns()
    warns[str(user_id)] = []
    save_warns(warns)

def get_warns_count(user_id):
    """Obtient le nombre actuel d'avertissements pour un utilisateur sp√©cifique."""
    warns = load_warns()
    return len(warns.get(str(user_id), []))

# --- V√©rification des Permissions ---
def is_admin():
    """D√©corateur pour v√©rifier si l'invocateur de la commande a les permissions d'administrateur."""
    async def predicate(ctx):
        if not ctx.author.guild_permissions.administrator:
            await ctx.send("üö´ Vous n'avez pas la permission d'utiliser cette commande (Administrateur requis).", ephemeral=True)
            return False
        return True
    return commands.check(predicate)

# --- Analyseur de Dur√©e ---
def parse_duration(duration_str):
    """Analyse une cha√Æne de dur√©e (par exemple, '10s', '5m', '1h', '2d') en secondes."""
    match = re.fullmatch(r"(\d+)([smhd])", duration_str.lower())
    if not match:
        return None
    value, unit = int(match.group(1)), match.group(2)
    return value * {"s": 1, "m": 60, "h": 3600, "d": 86400}[unit]

# --- Commandes de Mod√©ration ---
@bot.command()
@is_admin()
async def kick(ctx, member: discord.Member, *, reason=None):
    """Expulse un membre du serveur."""
    try:
        await member.kick(reason=reason)
        await ctx.send(f"üë¢ **{member}** a √©t√© expuls√©. Raison : {reason or 'Aucune'}")
        log_action("kick", ctx.author, member, reason)
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions de faire √ßa. Veuillez v√©rifier mes r√¥les.")
    except Exception as e:
        await ctx.send(f"Erreur lors de l'expulsion : {e}")

@bot.command()
@is_admin()
async def ban(ctx, member: discord.Member, *, reason=None):
    """Bannit un membre du serveur."""
    try:
        await member.ban(reason=reason)
        await ctx.send(f"üî® **{member}** a √©t√© banni. Raison : {reason or 'Aucune'}")
        log_action("ban", ctx.author, member, reason)
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions de faire √ßa. Veuillez v√©rifier mes r√¥les.")
    except Exception as e:
        await ctx.send(f"Erreur lors du bannissement : {e}")

@bot.command()
@is_admin()
async def unban(ctx, *, member_identifier):
    """D√©bannit un utilisateur par son nom#tag ou son ID."""
    banned_users = await ctx.guild.bans()
    member_identifier = member_identifier.strip()

    for ban_entry in banned_users:
        user = ban_entry.user
        if (f"{user.name}#{user.discriminator}".lower() == member_identifier.lower() or
            str(user.id) == member_identifier):
            try:
                await ctx.guild.unban(user)
                await ctx.send(f"‚úÖ **{user}** a √©t√© d√©banni.")
                log_action("unban", ctx.author, user)
                return
            except discord.Forbidden:
                await ctx.send("‚ùå Je n'ai pas les permissions de faire √ßa. Veuillez v√©rifier mes r√¥les.")
                return
            except Exception as e:
                await ctx.send(f"Erreur lors du d√©bannissement : {e}")
                return
    await ctx.send(f"Utilisateur `{member_identifier}` introuvable dans la liste des bannissements.")

@bot.command()
@is_admin()
async def clear(ctx, amount: int):
    """Supprime un nombre sp√©cifi√© de messages du salon actuel."""
    if amount <= 0:
        await ctx.send("Nombre de messages invalide.")
        return
    try:
        # +1 pour inclure le message de commande lui-m√™me, puis le supprimer
        deleted = await ctx.channel.purge(limit=amount + 1)
        await ctx.send(f"‚úÖ **{len(deleted)-1}** messages supprim√©s.", delete_after=5)
        log_action("clear", ctx.author, details=f"{len(deleted)-1} messages supprim√©s dans {ctx.channel.name}")
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions de supprimer les messages dans ce salon.")
    except Exception as e:
        await ctx.send(f"Erreur lors de la suppression des messages : {e}")

@bot.command()
@is_admin()
async def warn(ctx, member: discord.Member, *, reason="Aucune raison fournie"):
    """Avertit un membre. Bannissement automatique apr√®s MAX_WARNS."""
    count = add_warn(member.id, reason)
    await ctx.send(f"‚ö†Ô∏è **{member}** a √©t√© averti (**{count}/{MAX_WARNS}**). Raison : **{reason}**")
    log_action("warn", ctx.author, member, reason)
    if count >= MAX_WARNS:
        try:
            await member.ban(reason=f"Bannissement automatique apr√®s {MAX_WARNS} avertissements")
            await ctx.send(f"üö´ **{member}** a √©t√© automatiquement banni apr√®s **{MAX_WARNS}** avertissements.")
            log_action("ban", bot.user, member, f"Bannissement automatique apr√®s {MAX_WARNS} avertissements")
        except discord.Forbidden:
            await ctx.send(f"‚ùå Impossible de bannir {member} automatiquement (permissions manquantes).")
        except Exception as e:
            await ctx.send(f"Erreur lors du bannissement automatique : {e}")

@bot.command()
@is_admin()
async def unwarn(ctx, member: discord.Member):
    """Supprime tous les avertissements pour un membre."""
    reset_warns(member.id)
    await ctx.send(f"‚úÖ Tous les avertissements pour **{member}** ont √©t√© supprim√©s.")
    log_action("unwarn", ctx.author, member)

# --- Syst√®me de Sourdine (Mute) ---
# NOTE: Le mute √† l'√©chelle du serveur en changeant les permissions de chaque canal est lourd.
# Pour les grands serveurs, un r√¥le "Muet" avec des permissions sp√©cifiques est pr√©f√©rable.
# Cependant, pour garder la simplicit√© et la fonctionnalit√©, je maintiens la version actuelle.
async def apply_server_mute(ctx, member):
    """Applique une sourdine √† l'√©chelle du serveur en d√©finissant les permissions dans tous les canaux."""
    for channel in ctx.guild.channels:
        try:
            # √âcraser les permissions pour emp√™cher d'envoyer des messages et de parler
            await channel.set_permissions(member, send_messages=False, speak=False, add_reactions=False)
        except discord.Forbidden:
            print(f"DEBUG: Impossible de d√©finir les permissions de mute pour {member} dans {channel.name} (Forbidden).")
        except Exception as e:
            print(f"DEBUG: Erreur lors de l'application du mute pour {member} dans {channel.name}: {e}")

async def remove_server_mute(ctx, member):
    """Supprime la sourdine √† l'√©chelle du serveur en r√©initialisant les permissions des canaux."""
    for channel in ctx.guild.channels:
        try:
            # Effacer toutes les surcharges sp√©cifiques pour le membre dans ce canal
            await channel.set_permissions(member, overwrite=None)
        except discord.Forbidden:
            print(f"DEBUG: Impossible de r√©initialiser les permissions de mute pour {member} dans {channel.name} (Forbidden).")
        except Exception as e:
            print(f"DEBUG: Erreur lors de la suppression du mute pour {member} dans {channel.name}: {e}")

@bot.command()
@is_admin()
async def mute(ctx, member: discord.Member, *, reason=None):
    """Rend un membre muet sur tout le serveur."""
    try:
        await apply_server_mute(ctx, member)
        await ctx.send(f"üîá **{member.mention}** a √©t√© rendu muet. Raison : {reason or 'Aucune'}")
        log_action("mute", ctx.author, member, reason)
    except Exception as e:
        await ctx.send(f"Erreur lors du mute : {e}")

@bot.command()
@is_admin()
async def unmute(ctx, member: discord.Member):
    """Rend un membre non muet sur tout le serveur."""
    try:
        await remove_server_mute(ctx, member)
        await ctx.send(f"üîä **{member.mention}** n'est plus muet.")
        log_action("unmute", ctx.author, member)
    except Exception as e:
        await ctx.send(f"Erreur lors de l'unmute : {e}")

@bot.command()
@is_admin()
async def tempmute(ctx, member: discord.Member, duration: str, *, reason=None):
    """Rend un membre temporairement muet pour une dur√©e sp√©cifi√©e."""
    seconds = parse_duration(duration)
    if seconds is None:
        await ctx.send("‚ùå Format de dur√©e invalide. Utilisez : `10s`, `5m`, `1h`, `2d`")
        return
    try:
        await apply_server_mute(ctx, member)
        await ctx.send(f"‚è≥ **{member.mention}** a √©t√© rendu muet pour **{duration}**.")
        log_action("tempmute", ctx.author, member, reason, duration)
        await asyncio.sleep(seconds)
        # V√©rifier si le membre est toujours dans le serveur avant de le rendre non muet
        if member in ctx.guild.members:
            await remove_server_mute(ctx, member)
            await ctx.send(f"üîä **{member.mention}** n'est plus muet apr√®s **{duration}**.")
            log_action("tempunmute", bot.user, member, f"Sourdine temporaire termin√©e apr√®s {duration}")
    except Exception as e:
        await ctx.send(f"Erreur lors du tempmute : {e}")

# --- Vue de Confirmation d'Envoi de Message en Masse ---
class ConfirmSendView(View):
    def __init__(self, ctx, message):
        super().__init__(timeout=60)
        self.ctx = ctx
        self.message = message
        # Emp√™cher les interactions apr√®s le premier clic
        self.confirmed = False

    @discord.ui.button(label="Confirmer", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: Button):
        if interaction.user != self.ctx.author:
            await interaction.response.send_message("‚ùå Ce bouton n'est pas pour vous.", ephemeral=True)
            return
        
        if self.confirmed: # √âviter les doubles clics
            await interaction.response.send_message("Cette action est d√©j√† en cours ou a √©t√© compl√©t√©e.", ephemeral=True)
            return
        self.confirmed = True

        await interaction.response.send_message("üöÄ Envoi en cours...", ephemeral=True) # R√©pondre √† l'interaction rapidement

        count, failed = 0, 0
        # D√©sactiver les boutons apr√®s le clic pour √©viter les probl√®mes
        self.children[0].disabled = True
        self.children[1].disabled = True
        await interaction.message.edit(view=self)

        for member in self.ctx.guild.members:
            if member.bot:
                continue
            try:
                await member.send(self.message)
                count += 1
                await asyncio.sleep(0.5) # Petite pause pour √©viter le rate limit de Discord
            except discord.Forbidden:
                failed += 1
                print(f"DEBUG: Impossible d'envoyer un DM √† {member.name} (Forbidden).")
            except Exception as e:
                failed += 1
                print(f"DEBUG: √âchec de l'envoi de DM √† {member.name}: {e}")

        await self.ctx.send(f"‚úÖ Message envoy√© √† **{count}** membres. √âchecs : **{failed}**")
        log_action("mass_dm", self.ctx.author, details=f"Envoy√© √† {count} membres, {failed} √©checs")
        self.stop() # Arr√™ter la vue apr√®s l'envoi

    @discord.ui.button(label="Annuler", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: Button):
        if interaction.user != self.ctx.author:
            await interaction.response.send_message("‚ùå Ce bouton n'est pas pour vous.", ephemeral=True)
            return
        if self.confirmed: # Si d√©j√† confirm√©, l'annulation n'a plus de sens
            await interaction.response.send_message("Action d√©j√† en cours, impossible d'annuler.", ephemeral=True)
            return
        
        await interaction.response.send_message("‚ùå Envoi annul√©.", ephemeral=True)
        # D√©sactiver les boutons
        self.children[0].disabled = True
        self.children[1].disabled = True
        await interaction.message.edit(view=self)
        self.stop()

@bot.command()
@is_admin()
async def sendall(ctx, *, message):
    """Envoie un message priv√© √† tous les membres du serveur (n√©cessite confirmation)."""
    embed = discord.Embed(
        title="‚ö†Ô∏è Confirmation d'envoi de message en masse",
        description=f"√ätes-vous s√ªr de vouloir envoyer le message suivant √† **tous les membres** du serveur ?\n\n```\n{message}\n```\n\n**Ceci est irr√©versible !**",
        color=discord.Color.orange()
    )
    await ctx.send(embed=embed, view=ConfirmSendView(ctx, message))

# --- Syst√®me de Giveaways ---
giveaways = {} # {message_id: {details}} - (Note : ceci n'est pas persistant apr√®s un red√©marrage du bot)

@bot.command()
@is_admin()
async def giveaway(ctx, duration: str, *, prize):
    """D√©marre un concours pour une dur√©e et un prix sp√©cifi√©s."""
    seconds = parse_duration(duration)
    if seconds is None:
        await ctx.send("‚ùå Format de dur√©e invalide. Utilisez : `10s`, `5m`, `1h`, `2d`")
        return
    
    # Cr√©ation d'un Embed plus esth√©tique pour le giveaway
    embed = discord.Embed(
        title="üéâ Giveaway en Cours ! üéâ",
        description=f"R√©agissez avec üéâ pour tenter de gagner : **{prize}**",
        color=discord.Color.gold()
    )
    embed.add_field(name="‚è∞ Dur√©e restante", value=f"`{duration}`", inline=False)
    embed.set_footer(text=f"Organis√© par {ctx.author.display_name}")
    embed.timestamp = datetime.now(timezone.utc)

    giveaway_message = await ctx.send(embed=embed)
    await giveaway_message.add_reaction("üéâ")

    giveaways[giveaway_message.id] = {
        "channel_id": ctx.channel.id,
        "prize": prize,
        "end_time": datetime.now(timezone.utc).timestamp() + seconds,
        "message_id": giveaway_message.id,
        "guild_id": ctx.guild.id
    }
    log_action("giveaway_start", ctx.author, details=f"Concours '{prize}' pour {duration}")

    await asyncio.sleep(seconds)

    try:
        message = await ctx.channel.fetch_message(giveaway_message.id)
    except discord.NotFound:
        await ctx.send("Erreur : Le message du concours a √©t√© supprim√©.")
        return
    except Exception:
        await ctx.send("Erreur lors de la r√©cup√©ration du message du concours.")
        return

    users = set()
    for reaction in message.reactions:
        if str(reaction.emoji) == "üéâ":
            # await reaction.users().flatten() est d√©pr√©ci√©, utilisez la m√©thode asynchrone
            async for user in reaction.users():
                if user.bot:
                    continue
                users.add(user)

    if not users:
        await ctx.send("üò¢ Aucun participant pour le concours. Personne n'a gagn√©.")
        log_action("giveaway_end", ctx.author, details="Aucun participant")
        return

    winner = random.choice(list(users))
    await ctx.send(f"üéä **F√©licitations** {winner.mention} ! Vous avez gagn√© : **{prize}** üéâ")
    log_action("giveaway_end", ctx.author, winner, details=f"Gagnant : {winner.name}, Prix : {prize}")

# --- Commande de Sondage ---
@bot.command()
async def sondage(ctx, *, question):
    """Cr√©e un sondage simple avec les r√©actions üëç et üëé."""
    embed = discord.Embed(
        title="üìä Sondage",
        description=question,
        color=0x00ffff
    )
    embed.set_footer(text=f"Sondage cr√©√© par {ctx.author.display_name}")
    embed.timestamp = datetime.now(timezone.utc)
    message = await ctx.send(embed=embed)
    await message.add_reaction("üëç")
    await message.add_reaction("üëé")
    try:
        await ctx.message.delete() # Supprime le message de commande
    except discord.Forbidden:
        print(f"Avertissement: Impossible de supprimer le message de commande du sondage pour {ctx.author}.")


# --- Vues et Commandes du Syst√®me de Tickets ---

# Vue pour la fermeture d'un ticket individuel
class CloseTicketView(View):
    def __init__(self):
        super().__init__(timeout=None) # Garder la vue active ind√©finiment

    @discord.ui.button(label="Fermer le ticket", style=discord.ButtonStyle.red, custom_id="close_ticket_button")
    async def close_ticket_button(self, interaction: discord.Interaction, button: Button):
        channel = interaction.channel
        guild = interaction.guild
        user_closing = interaction.user

        # D√©sactiver le bouton pour √©viter les doubles clics pendant le processus
        self.children[0].disabled = True
        await interaction.message.edit(view=self)

        # V√©rification des permissions de fermeture (cr√©ateur ou admin)
        ticket_creator_id = None
        if channel.name.startswith("ticket-"):
            try:
                # Extraire l'ID du cr√©ateur du nom du canal (ex: ticket-123456789)
                ticket_creator_id = int(channel.name.split("-")[1])
            except ValueError:
                print(f"DEBUG: Nom de canal {channel.name} non standard, impossible d'extraire l'ID du cr√©ateur.")
                pass # Le nom du canal n'est peut-√™tre pas au format ticket-ID_UTILISATEUR

        # Seul le cr√©ateur du ticket ou un administrateur peut fermer
        if ticket_creator_id is not None and user_closing.id != ticket_creator_id and not user_closing.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå Vous n'avez pas la permission de fermer ce ticket.", ephemeral=True)
            self.children[0].disabled = False # R√©activer le bouton si la permission est refus√©e
            await interaction.message.edit(view=self)
            return
        elif ticket_creator_id is None and not user_closing.guild_permissions.administrator:
            # Solution de repli si l'ID n'a pas pu √™tre extrait ou nom non standard
            await interaction.response.send_message("‚ùå Vous n'avez pas la permission de fermer ce ticket.", ephemeral=True)
            self.children[0].disabled = False # R√©activer le bouton si la permission est refus√©e
            await interaction.message.edit(view=self)
            return
        
        # R√©pondre √† l'interaction en premier, avant les op√©rations longues
        await interaction.response.send_message("‚úÖ Ticket ferm√©. Envoi de la retranscription aux administrateurs, puis suppression dans 5 secondes...")
        
        log_action("ticket_close", user_closing, details=f"Ticket ferm√© : {channel.name} par le bouton")

        # --- Partie GESTION DE LA RETRANSCRIPTION ---
        transcript = f"Retranscription du ticket {channel.name} ferm√© par {user_closing} le {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} (UTC):\n\n"
        
        try:
            # R√©cup√©rer tous les messages du ticket, en ordre chronologique
            messages = [msg async for msg in channel.history(limit=None, oldest_first=True)]
            for msg in messages:
                time_str = msg.created_at.strftime("%Y-%m-%d %H:%M:%S")
                transcript += f"[{time_str}] {msg.author.display_name}: {msg.content}\n"
        except Exception as e:
            transcript += f"\n--- ERREUR LORS DE LA R√âCUP√âRATION DES MESSAGES: {e} ---\n"
            print(f"DEBUG: Erreur lors de la r√©cup√©ration des messages pour la retranscription dans {channel.name}: {e}")

        # Envoyer la retranscription √† tous les administrateurs
        admin_members_notified = 0
        for member in guild.members:
            # V√©rifiez si le membre est un administrateur (ou a 'g√©rer les messages' comme staff) et n'est pas un bot
            if (member.guild_permissions.administrator or member.guild_permissions.manage_messages) and not member.bot:
                try:
                    # Envoyer sous forme de fichier si la retranscription est trop longue pour un seul message
                    if len(transcript) > 1900: # La limite de message Discord est de 2000 caract√®res
                        # Cr√©er un fichier temporaire
                        with open("transcript.txt", "w", encoding="utf-8") as f:
                            f.write(transcript)
                        await member.send(f"üìÑ **Retranscription du ticket pour {channel.name} :**", file=discord.File("transcript.txt"))
                        os.remove("transcript.txt") # Nettoyer le fichier apr√®s l'envoi
                    else:
                        await member.send(f"üìÑ **Retranscription du ticket pour {channel.name} :**\n```\n{transcript}\n```")
                    admin_members_notified += 1
                except discord.Forbidden:
                    print(f"DEBUG: Impossible d'envoyer la retranscription en DM √† l'administrateur {member.name} (Discord.Forbidden).")
                except Exception as e:
                    print(f"DEBUG: √âchec de l'envoi de la retranscription √† {member.name}: {e}")
        
        print(f"DEBUG: Retranscription envoy√©e √† {admin_members_notified} administrateurs pour le ticket {channel.name}.")
        
        # --- Partie SUPPRESSION DU CANAL ---
        await asyncio.sleep(5) # Attendre 5 secondes comme promis

        try:
            await channel.delete(reason=f"Ticket ferm√© par {user_closing}")
            print(f"DEBUG: Canal {channel.name} supprim√© avec succ√®s.")
            self.stop() # Arr√™ter la vue apr√®s la suppression r√©ussie
        except discord.Forbidden:
            print(f"ERREUR CRITIQUE: Le bot n'a PAS les permissions pour supprimer le canal {channel.name} (discord.Forbidden).")
            # Utilisez interaction.followup.send pour envoyer un message de suivi apr√®s la premi√®re r√©ponse
            await interaction.followup.send(f"‚ùå **Erreur grave :** Je n'ai PAS les permissions de supprimer ce canal '{channel.name}'. Veuillez v√©rifier mes r√¥les et permissions (`G√©rer les salons`) sur le serveur ou supprimez-le manuellement.", ephemeral=False)
        except Exception as e:
            print(f"ERREUR INATTENDUE: Une erreur est survenue lors de la suppression du canal {channel.name} : {e}")
            await interaction.followup.send(f"‚ùå **Erreur inattendue :** Une erreur est survenue lors de la suppression du canal '{channel.name}' : {e}", ephemeral=False)
        self.stop() # Arr√™ter la vue m√™me si la suppression √©choue, pour √©viter des interactions fant√¥mes.


# Vue pour le panel de cr√©ation de tickets
class TicketCreationView(View):
    def __init__(self):
        super().__init__(timeout=None) # La vue du panel doit rester active ind√©finiment

    @discord.ui.button(label="‚ûï Cr√©er un Ticket", style=discord.ButtonStyle.blurple, custom_id="create_ticket_button")
    async def create_ticket_button_callback(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer(ephemeral=True, thinking=True) # Affiche "Le bot r√©fl√©chit..." en mode √©ph√©m√®re

        guild = interaction.guild
        author = interaction.user
        category = discord.utils.get(guild.categories, name=TICKET_CATEGORY_NAME)
        
        # V√©rifier si la cat√©gorie existe, sinon la cr√©er
        if category is None:
            try:
                # Cr√©er la cat√©gorie avec des permissions de base si elle n'existe pas
                category = await guild.create_category(
                    TICKET_CATEGORY_NAME,
                    overwrites={
                        guild.default_role: discord.PermissionOverwrite(read_messages=False)
                    }
                )
                print(f"DEBUG: Cat√©gorie '{TICKET_CATEGORY_NAME}' cr√©√©e.")
            except discord.Forbidden:
                await interaction.followup.send("‚ùå Je n'ai pas les permissions pour cr√©er la cat√©gorie de tickets. Veuillez v√©rifier mes r√¥les.", ephemeral=True)
                print(f"ERREUR CRITIQUE: Le bot n'a pas les permissions pour cr√©er la cat√©gorie '{TICKET_CATEGORY_NAME}'.")
                return
            except Exception as e:
                await interaction.followup.send(f"‚ùå Une erreur est survenue lors de la cr√©ation de la cat√©gorie : {e}", ephemeral=True)
                print(f"ERREUR INATTENDUE: Erreur lors de la cr√©ation de la cat√©gorie '{TICKET_CATEGORY_NAME}': {e}")
                return

        # V√©rifier si l'utilisateur a d√©j√† un ticket ouvert
        existing_channel = discord.utils.get(guild.text_channels, name=f"ticket-{author.id}")
        if existing_channel:
            await interaction.followup.send(f"‚ùå Vous avez d√©j√† un ticket ouvert : {existing_channel.mention}", ephemeral=True)
            return

        # D√©finir les permissions pour le nouveau canal de ticket
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False), # @everyone ne voit pas le ticket
            author: discord.PermissionOverwrite(read_messages=True, send_messages=True, attach_files=True), # Le cr√©ateur voit et peut envoyer
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_channels=True), # Le bot voit, envoie, g√®re le canal
        }
        
        # Ajouter les membres avec la permission 'g√©rer les messages' (ou administrateur) au ticket
        for member in guild.members:
            if member.guild_permissions.manage_channels or member.guild_permissions.administrator: # Manage_channels inclut la gestion des salons
                overwrites[member] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

        try:
            channel = await guild.create_text_channel(
                f"ticket-{author.id}", # Nom du canal avec l'ID de l'utilisateur
                category=category,
                overwrites=overwrites
            )
            # Envoyer le message initial dans le ticket avec le bouton de fermeture
            await channel.send(
                f"Bienvenue {author.mention} ! Veuillez d√©crire votre probl√®me.\nUn membre du personnel vous r√©pondra bient√¥t.",
                view=CloseTicketView()
            )
            await interaction.followup.send(f"‚úÖ Votre ticket a √©t√© cr√©√© : {channel.mention}", ephemeral=True)
            log_action("ticket_create", author, details=f"Ticket cr√©√© via panel : {channel.name}")

            # Notifier les administrateurs et les mod√©rateurs du nouveau ticket
            notification_msg = f"üÜï Nouveau ticket cr√©√© par {author.mention} ({author.id}) : {channel.mention}"
            for member in guild.members:
                if (member.guild_permissions.administrator or member.guild_permissions.manage_channels) and not member.bot:
                    try:
                        await member.send(notification_msg)
                    except discord.Forbidden:
                        print(f"DEBUG: Impossible d'envoyer la notification de nouveau ticket en DM √† {member.name} (Discord.Forbidden).")
                    except Exception as e:
                        print(f"DEBUG: √âchec de l'envoi de la notification √† {member.name}: {e}")
        
        except discord.Forbidden:
            await interaction.followup.send("‚ùå Je n'ai pas les permissions pour cr√©er le canal de ticket. Veuillez v√©rifier mes r√¥les (notamment 'G√©rer les salons').", ephemeral=True)
            print(f"ERREUR CRITIQUE: Le bot n'a pas les permissions pour cr√©er le canal de ticket dans la cat√©gorie '{TICKET_CATEGORY_NAME}'.")
        except Exception as e:
            await interaction.followup.send(f"‚ùå Une erreur est survenue lors de la cr√©ation du ticket : {e}", ephemeral=True)
            print(f"ERREUR INATTENDUE: Erreur lors de la cr√©ation du canal de ticket: {e}")

@bot.command(name="ticketpanel")
@is_admin()
async def ticket_panel(ctx):
    """Envoie le panel de cr√©ation de tickets au salon actuel avec un beau menu."""
    embed = discord.Embed(
        title="üåü Bienvenue au Centre d'Aide üåü",
        description=(
            "Cliquez sur le bouton ci-dessous pour **ouvrir un nouveau ticket**.\n"
            "Notre √©quipe d'assistance est l√† pour vous aider avec toutes vos questions et probl√®mes.\n\n"
            "**Pourquoi cr√©er un ticket ?**\n"
            "‚Ä¢ Aide technique\n"
            "‚Ä¢ Signalement de probl√®mes\n"
            "‚Ä¢ Questions g√©n√©rales\n"
            "‚Ä¢ Et bien plus encore !"
        ),
        color=discord.Color.blue() # Une couleur attrayante
    )
    embed.set_thumbnail(url=bot.user.display_avatar.url) # Photo de profil du bot
    # embed.set_image(url="https://i.imgur.com/your_ticket_banner_image.png") # Optionnel: mettez l'URL d'une image de banni√®re ici
    embed.set_footer(text="Appuyez sur le bouton pour commencer !")

    await ctx.send(embed=embed, view=TicketCreationView())
    try:
        await ctx.message.delete() # Supprimer le message de commande pour la propret√©
    except discord.Forbidden:
        print(f"Avertissement: Impossible de supprimer le message de commande !ticketpanel pour {ctx.author}.")
    log_action("ticket_panel_sent", ctx.author, details=f"Panel de tickets envoy√© dans {ctx.channel.name}")


@bot.command()
async def ticket(ctx, action=None):
    """G√®re les tickets : cr√©e (via le panel) ou les ferme."""
    # Cette partie est maintenue pour le cas o√π quelqu'un tenterait d'utiliser !ticket close manuellement.
    # La cr√©ation via !ticket est volontairement d√©sactiv√©e pour forcer l'utilisation du panel.

    if action is None:
        await ctx.send("‚ùå Pour cr√©er un ticket, veuillez utiliser le panel de tickets dans le salon appropri√© (`!ticketpanel`).", ephemeral=True)
        return

    elif action.lower() == "close":
        channel = ctx.channel
        guild = ctx.guild
        user_closing = ctx.author # L'utilisateur qui a tap√© la commande

        if not channel.name.startswith("ticket-"):
            await ctx.send("‚ùå Cette commande (`!ticket close`) doit √™tre utilis√©e dans un canal de ticket.", ephemeral=True)
            return
        
        # V√©rification des permissions de fermeture (cr√©ateur ou admin)
        ticket_creator_id = None
        if channel.name.startswith("ticket-"):
            try:
                ticket_creator_id = int(channel.name.split("-")[1])
            except ValueError:
                pass # Le nom du canal n'est peut-√™tre pas au format ticket-ID_UTILISATEUR

        if ticket_creator_id is not None and user_closing.id != ticket_creator_id and not user_closing.guild_permissions.administrator:
            await ctx.send("‚ùå Vous n'avez pas la permission de fermer ce ticket.", ephemeral=True)
            return
        elif ticket_creator_id is None and not user_closing.guild_permissions.administrator:
            await ctx.send("‚ùå Vous n'avez pas la permission de fermer ce ticket.", ephemeral=True)
            return

        # Confirmer que le message "Ticket ferm√©..." est envoy√© en premier
        await ctx.send("‚úÖ Ticket ferm√©. Envoi de la retranscription aux administrateurs, puis suppression dans 5 secondes...")
        log_action("ticket_close", user_closing, details=f"Ticket ferm√© : {channel.name} par la commande")

        # --- Partie GESTION DE LA RETRANSCRIPTION ---
        transcript = f"Retranscription du ticket {channel.name} ferm√© par {user_closing} le {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} (UTC):\n\n"
        try:
            messages = [msg async for msg in channel.history(limit=None, oldest_first=True)]
            for msg in messages:
                time_str = msg.created_at.strftime("%Y-%m-%d %H:%M:%S")
                transcript += f"[{time_str}] {msg.author.display_name}: {msg.content}\n"
        except Exception as e:
            transcript += f"\n--- ERREUR LORS DE LA R√âCUP√âRATION DES MESSAGES: {e} ---\n"
            print(f"DEBUG: Erreur lors de la r√©cup√©ration des messages pour la retranscription dans {channel.name}: {e}")

        admin_members_notified = 0
        for member in guild.members:
            if (member.guild_permissions.administrator or member.guild_permissions.manage_channels) and not member.bot:
                try:
                    if len(transcript) > 1900:
                        with open("transcript.txt", "w", encoding="utf-8") as f:
                            f.write(transcript)
                        await member.send(f"üìÑ **Retranscription du ticket pour {channel.name} :**", file=discord.File("transcript.txt"))
                        os.remove("transcript.txt")
                    else:
                        await member.send(f"üìÑ **Retranscription du ticket pour {channel.name} :**\n```\n{transcript}\n```")
                    admin_members_notified += 1
                except discord.Forbidden:
                    print(f"DEBUG: Impossible d'envoyer la retranscription en DM √† l'administrateur {member.name} (Discord.Forbidden).")
                except Exception as e:
                    print(f"DEBUG: √âchec de l'envoi de la retranscription √† {member.name}: {e}")
        
        print(f"DEBUG: Retranscription envoy√©e √† {admin_members_notified} administrateurs pour le ticket {channel.name}.")

        await asyncio.sleep(5)

        try:
            await channel.delete(reason=f"Ticket ferm√© par {user_closing}")
            print(f"DEBUG: Canal {channel.name} supprim√© avec succ√®s.")
        except discord.Forbidden:
            print(f"ERREUR CRITIQUE: Le bot n'a PAS les permissions pour supprimer le canal {channel.name} (discord.Forbidden).")
            await ctx.send(f"‚ùå **Erreur grave :** Je n'ai PAS les permissions de supprimer ce canal '{channel.name}'. Veuillez v√©rifier mes r√¥les et permissions (`G√©rer les salons`) sur le serveur ou supprimez-le manuellement.", ephemeral=False)
        except Exception as e:
            print(f"ERREUR INATTENDUE: Une erreur est survenue lors de la suppression du canal {channel.name} : {e}")
            await ctx.send(f"‚ùå **Erreur inattendue :** Une erreur est survenue lors de la suppression du canal '{channel.name}' : {e}", ephemeral=False)
    else:
        await ctx.send("‚ùå Utilisation : `!ticket close` ou utilisez le panneau de tickets.", ephemeral=True)

@bot.command()
async def rename(ctx, *, new_name):
    """Renomme le canal de ticket actuel (uniquement pour les canaux de ticket)."""
    channel = ctx.channel
    if not channel.name.startswith("ticket-"):
        await ctx.send("‚ùå Cette commande doit √™tre utilis√©e dans un canal de ticket.")
        return

    # V√©rifier si l'auteur est le cr√©ateur du ticket ou un administrateur
    channel_id_part = channel.name.split("-")[1]
    is_ticket_creator = False
    try:
        if int(channel_id_part) == ctx.author.id:
            is_ticket_creator = True
    except ValueError:
        pass # Pas un nom de ticket standard

    if ctx.author.guild_permissions.administrator or is_ticket_creator:
        try:
            # Remplacer les espaces par des tirets pour les noms de canaux Discord
            cleaned_new_name = new_name.lower().replace(' ', '-')
            # Assurez-vous que le nom est court et ne contient pas de caract√®res sp√©ciaux
            cleaned_new_name = re.sub(r'[^a-z0-9-]', '', cleaned_new_name)
            if not cleaned_new_name: # Si le nom est vide apr√®s nettoyage
                await ctx.send("‚ùå Nom de ticket invalide apr√®s nettoyage. Veuillez utiliser des caract√®res alphanum√©riques.")
                return

            await channel.edit(name=f"ticket-{cleaned_new_name}")
            await ctx.send(f"‚úÖ Ticket renomm√© en : **ticket-{cleaned_new_name}**")
            log_action("ticket_rename", ctx.author, details=f"Ticket renomm√© en ticket-{cleaned_new_name}")
        except discord.Forbidden:
            await ctx.send(f"‚ùå Je n'ai pas les permissions pour renommer ce canal. V√©rifiez mes r√¥les (notamment 'G√©rer les salons').")
            print(f"ERREUR CRITIQUE: Le bot n'a pas les permissions pour renommer le canal {channel.name}.")
        except Exception as e:
            await ctx.send(f"Erreur lors du renommage : {e}")
            print(f"ERREUR INATTENDUE: Erreur lors du renommage du canal {channel.name}: {e}")
    else:
        await ctx.send("‚ùå Vous n'avez pas la permission de renommer ce ticket.")

@bot.command()
@commands.has_permissions(manage_messages=True) # Exige la permission 'G√©rer les messages'
async def say(ctx, *, message):
    """
    Fait dire au bot un message.
    N√©cessite la permission 'G√©rer les messages'.
    """
    try:
        await ctx.message.delete() # Supprime le message de commande de l'utilisateur
        await ctx.send(message)    # Envoie le message que l'utilisateur a tap√©
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas la permission de supprimer votre message ou d'envoyer le mien ici.")
    except Exception as e:
        await ctx.send(f"Une erreur est survenue lors de l'ex√©cution de la commande `say` : {e}")

# --- NOUVELLE COMMANDE : !send ---
@bot.command()
@is_admin() # Seuls les administrateurs peuvent envoyer des messages priv√©s via cette commande
async def send(ctx, member: discord.Member, *, message):
    """
    Envoie un message priv√© (DM) √† un membre sp√©cifique.
    Usage: !send <@membre> <votre message>
    """
    try:
        await member.send(message)
        await ctx.send(f"‚úÖ Message envoy√© √† **{member.display_name}**.")
        log_action("send_dm", ctx.author, target=member, details=f"Message: {message}")
    except discord.Forbidden:
        await ctx.send(f"‚ùå Impossible d'envoyer un message priv√© √† **{member.display_name}**. Leurs param√®tres de confidentialit√© peuvent bloquer les DMs du bot.", ephemeral=True)
        print(f"DEBUG: Impossible d'envoyer un DM √† {member.name} (Forbidden).")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors de l'envoi du message priv√© √† {member.display_name} : {e}", ephemeral=True)
        print(f"DEBUG: Erreur lors de l'envoi de DM √† {member.name}: {e}")
    finally:
        try:
            await ctx.message.delete() # Supprime le message de commande de l'utilisateur pour la propret√©
        except discord.Forbidden:
            print(f"Avertissement: Impossible de supprimer le message de commande !send pour {ctx.author}.")


@bot.command()
async def feedback(ctx, *, message):
    """Envoie un message de feedback √† tous les administrateurs via DM."""
    embed = discord.Embed(
        title="üìù Nouveau Feedback",
        description=message,
        color=0x3498db
    )
    embed.set_author(name=str(ctx.author), icon_url=ctx.author.display_avatar.url)
    embed.timestamp = datetime.now(timezone.utc)

    sent, failed = 0, 0
    for member in ctx.guild.members:
        # Envoyer le feedback aux administrateurs ou ceux qui peuvent g√©rer les canaux (staff g√©n√©ral)
        if (member.guild_permissions.administrator or member.guild_permissions.manage_channels) and not member.bot:
            try:
                await member.send(embed=embed)
                sent += 1
            except discord.Forbidden:
                print(f"DEBUG: Impossible d'envoyer le feedback en DM √† {member.name} (Forbidden).")
                failed += 1
            except Exception:
                failed += 1

    await ctx.send(f"‚úÖ Feedback envoy√© √† **{sent}** membre(s) du staff. **{failed}** √©chec(s).")
    log_action("feedback", ctx.author, details=message)

@bot.command(name="userinfo")
async def userinfo(ctx, member: discord.Member = None):
    """Affiche les informations sur un membre."""
    member = member or ctx.author

    roles = [role.mention for role in member.roles if role != ctx.guild.default_role]
    roles_display = ", ".join(roles) if roles else "Aucun r√¥le"

    embed = discord.Embed(
        title=f"Informations pour {member.display_name}",
        color=discord.Color.blue(),
        timestamp=datetime.now(timezone.utc)
    )
    embed.set_thumbnail(url=member.display_avatar.url)
    embed.add_field(name="üÜî ID", value=member.id, inline=False)
    embed.add_field(name="üóìÔ∏è A rejoint le serveur le", value=member.joined_at.strftime('%d/%m/%Y %H:%M'), inline=True)
    embed.add_field(name="üìÖ Compte cr√©√© le", value=member.created_at.strftime('%d/%m/%Y %H:%M'), inline=True)
    embed.add_field(name="üé≠ R√¥les", value=roles_display, inline=False)
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

@bot.command()
@is_admin()
async def banid(ctx, user_id: int, *, reason=None):
    """Bannit un utilisateur par son ID, m√™me s'il n'est pas sur le serveur."""
    try:
        user = await bot.fetch_user(user_id) # R√©cup√®re l'objet utilisateur par ID
        await ctx.guild.ban(user, reason=reason)
        await ctx.send(f"üî® Utilisateur **`{user}`** (ID : `{user_id}`) a √©t√© banni.")
        log_action("banid", ctx.author, user, reason)
    except discord.NotFound:
        await ctx.send(f"‚ùå Utilisateur avec l'ID `{user_id}` introuvable.")
    except discord.Forbidden:
        await ctx.send(f"‚ùå Je n'ai pas les permissions pour bannir cet utilisateur.")
    except Exception as e:
        await ctx.send(f"Erreur lors du bannissement par ID : {e}")

@bot.command()
@is_admin()
async def kickid(ctx, user_id: int, *, reason=None):
    """Expulse un utilisateur par son ID s'il est sur le serveur."""
    member = ctx.guild.get_member(user_id) # Tente d'obtenir le membre directement
    if member:
        try:
            await member.kick(reason=reason)
            await ctx.send(f"üë¢ **`{member.display_name}`** (ID : `{user_id}`) a √©t√© expuls√©.")
            log_action("kickid", ctx.author, member, reason)
        except discord.Forbidden:
            await ctx.send(f"‚ùå Je n'ai pas les permissions pour expulser cet utilisateur.")
        except Exception as e:
            await ctx.send(f"Erreur lors de l'expulsion par ID : {e}")
    else:
        await ctx.send(f"‚ùå Utilisateur avec l'ID `{user_id}` introuvable sur ce serveur.")

@bot.command()
@is_admin()
async def unbanid(ctx, user_id: int):
    """D√©bannit un utilisateur par son ID."""
    banned_users = await ctx.guild.bans()
    for entry in banned_users:
        if entry.user.id == user_id:
            try:
                await ctx.guild.unban(entry.user)
                await ctx.send(f"‚úÖ **`{entry.user.name}#{entry.user.discriminator}`** (ID : `{user_id}`) a √©t√© d√©banni.")
                log_action("unbanid", ctx.author, entry.user)
                return
            except discord.Forbidden:
                await ctx.send(f"‚ùå Je n'ai pas les permissions pour d√©bannir cet utilisateur.")
                return
            except Exception as e:
                await ctx.send(f"Erreur lors du d√©bannissement par ID : {e}")
                return
    await ctx.send(f"‚ùå Utilisateur avec l'ID `{user_id}` introuvable dans la liste des bannissements.")

@bot.command()
@is_admin()
async def lock(ctx):
    """Verrouille le canal actuel, emp√™chant @everyone d'envoyer des messages."""
    try:
        everyone_role = ctx.guild.default_role
        await ctx.channel.set_permissions(everyone_role, send_messages=False)
        await ctx.send("üîí Canal **verrouill√©**. `@everyone` ne peut plus envoyer de messages ici.")
        log_action("channel_lock", ctx.author, target=ctx.channel, details=f"Canal {ctx.channel.name} verrouill√©")
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour verrouiller ce canal. V√©rifiez mes r√¥les.")
    except Exception as e:
        await ctx.send(f"Erreur lors du verrouillage du canal : {e}")

@bot.command()
@is_admin()
async def unlock(ctx):
    """D√©verrouille le canal actuel, permettant √† @everyone d'envoyer des messages."""
    try:
        everyone_role = ctx.guild.default_role
        # R√©initialise la permission send_messages √† None (h√©rite de la cat√©gorie/serveur)
        await ctx.channel.set_permissions(everyone_role, send_messages=None)
        await ctx.send("üîì Canal **d√©verrouill√©**. `@everyone` peut maintenant envoyer des messages ici.")
        log_action("channel_unlock", ctx.author, target=ctx.channel, details=f"Canal {ctx.channel.name} d√©verrouill√©")
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour d√©verrouiller ce canal. V√©rifiez mes r√¥les.")
    except Exception as e:
        await ctx.send(f"Erreur lors du d√©verrouillage du canal : {e}")

@bot.command()
@is_admin()
async def slowmode(ctx, seconds: int):
    """
    D√©finit le mode lent pour le canal actuel.
    La dur√©e est en secondes (0 pour d√©sactiver). Max 21600 secondes (6 heures).
    """
    if seconds < 0 or seconds > 21600:
        await ctx.send("‚ùå La dur√©e du mode lent doit √™tre entre 0 et 21600 secondes (6 heures).")
        return
    try:
        await ctx.channel.edit(slowmode_delay=seconds)
        if seconds == 0:
            await ctx.send("‚úÖ Mode lent **d√©sactiv√©** pour ce canal.")
            log_action("slowmode_off", ctx.author, target=ctx.channel)
        else:
            await ctx.send(f"‚úÖ Mode lent d√©fini √† **{seconds} secondes** pour ce canal.")
            log_action("slowmode_on", ctx.author, target=ctx.channel, duration=f"{seconds}s")
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour d√©finir le mode lent dans ce canal. V√©rifiez mes r√¥les.")
    except Exception as e:
        await ctx.send(f"Erreur lors de la d√©finition du mode lent : {e}")

# --- Commandes Anti-Raid ---
@bot.command()
@is_admin()
async def raid(ctx, action: str):
    """
    Active ou d√©sactive le mode anti-raid.
    Usage: !raid on / !raid off
    """
    global anti_raid_enabled

    if action.lower() == "on":
        anti_raid_enabled = True
        await ctx.send("üõ°Ô∏è Mode anti-raid **activ√©**. Les comptes r√©cents et les spammers rapides seront bannis.")
        log_action("anti_raid", ctx.author, details="Activ√©")
    elif action.lower() == "off":
        anti_raid_enabled = False
        await ctx.send("üè≥Ô∏è Mode anti-raid **d√©sactiv√©**.")
        log_action("anti_raid", ctx.author, details="D√©sactiv√©")
    else:
        await ctx.send("‚ùå Action invalide. Utilisez `!raid on` ou `!raid off`.")

# --- Commandes G√©n√©rales Utilitaires ---
@bot.command()
async def ping(ctx):
    """Affiche la latence du bot."""
    await ctx.send(f"üèì Pong! Latence : **{round(bot.latency * 1000)}ms**")

@bot.command(name="serverinfo")
async def server_info(ctx):
    """Affiche des informations sur le serveur."""
    guild = ctx.guild
    embed = discord.Embed(
        title=f"Informations du serveur **{guild.name}**",
        color=discord.Color.gold(),
        timestamp=datetime.now(timezone.utc)
    )
    embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
    embed.add_field(name="üÜî ID du serveur", value=guild.id, inline=True)
    embed.add_field(name="üëë Propri√©taire", value=guild.owner.mention, inline=True)
    embed.add_field(name="üóìÔ∏è Cr√©√© le", value=guild.created_at.strftime('%d/%m/%Y %H:%M'), inline=True)
    embed.add_field(name="üë• Membres", value=guild.member_count, inline=True)
    embed.add_field(name="üí¨ Salons textuels", value=len(guild.text_channels), inline=True)
    embed.add_field(name="üîä Salons vocaux", value=len(guild.voice_channels), inline=True)
    embed.add_field(name="üîó Niveau de Boost", value=f"Niveau {guild.premium_tier} ({guild.premium_subscription_count} boosts)", inline=True)
    
    roles_count = len(guild.roles) - 1 if len(guild.roles) > 0 else 0
    embed.add_field(name="üé≠ R√¥les", value=roles_count, inline=True)

    await ctx.send(embed=embed)

@bot.command(name="8ball")
async def eight_ball(ctx, *, question: str):
    """Pose une question √† la Magic 8 Ball."""
    responses = [
        "Oui, absolument.", "C'est certain.", "Sans aucun doute.", "Oui d√©finitivement.",
        "Tu peux compter dessus.", "Selon mes informations, oui.", "Les perspectives sont bonnes.",
        "Oui.", "Les signes indiquent oui.", "Repose ta question plus tard.",
        "Je ne peux pas te le dire maintenant.", "Je n'ai pas de boule de cristal pour √ßa.",
        "Concentre-toi et redemande.", "Ne compte pas dessus.", "Ma r√©ponse est non.",
        "Mes sources disent non.", "Les perspectives ne sont pas si bonnes.", "Tr√®s douteux."
    ]
    response = random.choice(responses)
    embed = discord.Embed(
        title="üé± Magic 8 Ball",
        description=f"**Question :** {question}\n**R√©ponse :** {response}",
        color=discord.Color.purple()
    )
    await ctx.send(embed=embed)

@bot.command()
async def help(ctx):
    """Affiche toutes les commandes disponibles."""
    embed = discord.Embed(
        title="üìö Aide des commandes du bot",
        description="Voici la liste de toutes les commandes disponibles (le pr√©fixe est `!`) :",
        color=discord.Color.blue()
    )

    embed.add_field(name="üëÆ‚Äç‚ôÇÔ∏è Mod√©ration", value="`kick <membre> [raison]`\n`ban <membre> [raison]`\n`unban <nom#tag ou ID>`\n`clear <nombre>`\n`warn <membre> [raison]`\n`unwarn <membre>`\n`mute <membre> [raison]`\n`unmute <membre>`\n`tempmute <membre> <dur√©e> [raison]`\n`lock`\n`unlock`\n`slowmode <secondes>`", inline=False)
    
    embed.add_field(name="üé´ Syst√®me de Tickets", value="`ticketpanel` (pour cr√©er le panel)\n`ticket close` (√† utiliser dans un ticket)\n`rename <nouveau_nom>` (dans un ticket)", inline=False)
    
    embed.add_field(name="üõ†Ô∏è Utilitaires", value="`send <@membre> <message>`\n`sendall <message>`\n`giveaway <dur√©e> <prix>`\n`sondage <question>`\n`userinfo [membre]`\n`banid <ID> [raison]`\n`kickid <ID> [raison]`\n`unbanid <ID>`\n`feedback <message>`\n`ping`\n`serverinfo`\n`8ball <question>`\n`say <message>`", inline=False)
    
    embed.add_field(name="üõ°Ô∏è Anti-Raid", value="`raid on`\n`raid off`", inline=False)

    embed.set_footer(text=f"Pr√©fixe actuel : {PREFIX}")
    await ctx.send(embed=embed)

# --- √âv√©nements du Bot ---
@bot.event
async def on_ready():
    print(f'Connect√© en tant que {bot.user.name} ({bot.user.id})')
    print('------')
    init_logs()
    init_warns()
    # Ajouter la vue persistante pour le panel de cr√©ation de tickets
    # Cela permet au bouton du panel de fonctionner m√™me apr√®s un red√©marrage du bot.
    bot.add_view(TicketCreationView())

@bot.event
async def on_message(message):
    global anti_raid_enabled
    global user_last_message_times

    if message.author.bot:
        await bot.process_commands(message)
        return

    lower_content = message.content.lower()

    # Mod√©ration des mots interdits
    if any(word in lower_content for word in bad_words):
        try:
            await message.delete()
            await message.channel.send(f"üö´ {message.author.mention}, votre message contient un mot interdit.", delete_after=5)
            log_action("auto-delete", bot.user, message.author, reason="Mot interdit", details=message.content)
            print(f"DEBUG: Message de {message.author} supprim√© (mot interdit).")
        except discord.Forbidden:
            print(f"Avertissement : Le bot n'a pas pu supprimer le message de mot interdit de {message.author} dans {message.channel.name} (permissions manquantes).")
        except Exception as e:
            print(f"Erreur lors de la mod√©ration des mots interdits : {e}")

    # Anti-Lien d'invitation Discord
    if "discord.gg/" in lower_content and not message.author.guild_permissions.manage_messages:
        try:
            await message.delete()
            await message.channel.send(f"üö´ {message.author.mention}, les liens d'invitation sont interdits.", delete_after=5)
            log_action("auto-delete", bot.user, message.author, reason="Lien d'invitation interdit", details=message.content)
            print(f"DEBUG: Message de {message.author} supprim√© (lien d'invitation).")
        except discord.Forbidden:
            print(f"Avertissement : Le bot n'a pas pu supprimer le lien d'invitation de {message.author} dans {message.channel.name} (permissions manquantes).")
        except Exception as e:
            print(f"Erreur lors de l'anti-lien : {e}")

    # Syst√®me Anti-Raid
    if anti_raid_enabled:
        user_id_str = str(message.author.id)
        current_time = datetime.now(timezone.utc)

        # Anti-spam rapide
        if user_id_str in user_last_message_times:
            delta = (current_time - user_last_message_times[user_id_str]).total_seconds()
            if delta < 1: # Si deux messages sont envoy√©s en moins d'une seconde
                try:
                    await message.delete()
                    await message.channel.send(f"{message.author.mention} : Comportement suspect d√©tect√©. Message supprim√©.", delete_after=5)
                    await message.author.ban(reason="Raid d√©tect√© : spam rapide")
                    log_action("antiraid_ban", bot.user, message.author, "Spam rapide")
                    print(f"DEBUG: {message.author} banni pour spam rapide.")
                    return # Arr√™te le traitement du message apr√®s le ban
                except discord.Forbidden:
                    print(f"Avertissement : Le bot n'a pas pu bannir {message.author} pour spam (permissions manquantes).")
                except Exception as e:
                    print(f"Erreur lors du bannissement anti-spam : {e}")
        user_last_message_times[user_id_str] = current_time

        # Anti-comptes r√©cents
        account_age = (current_time - message.author.created_at).total_seconds()
        if account_age < 600: # Si le compte a moins de 10 minutes (600 secondes)
            try:
                await message.delete()
                await message.channel.send(f"{message.author.mention} : Compte trop r√©cent. Banni pour s√©curit√©.", delete_after=5)
                await message.author.ban(reason="Raid d√©tect√© : compte r√©cent")
                log_action("antiraid_ban", bot.user, message.author, "Compte trop r√©cent")
                print(f"DEBUG: {message.author} banni pour compte trop r√©cent.")
                return # Arr√™te le traitement du message apr√®s le ban
            except discord.Forbidden:
                print(f"Avertissement : Le bot n'a pas pu bannir {message.author} pour compte r√©cent (permissions manquantes).")
            except Exception as e:
                print(f"Erreur lors du bannissement de compte r√©cent : {e}")

    await bot.process_commands(message)

@bot.event
async def on_command_error(ctx, error):
    # La permission 'G√©rer les messages' est ajout√©e ici pour plus de pr√©cision sur les erreurs CheckFailure
    if isinstance(error, commands.CommandNotFound):
        pass # Ignore les commandes introuvables (pour ne pas spammer le chat)
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå Argument(s) manquant(s). Utilisation correcte : `{PREFIX}{ctx.command.name} {ctx.command.signature}`", ephemeral=True)
    elif isinstance(error, commands.BadArgument):
        await ctx.send(f"‚ùå Argument(s) invalide(s). Veuillez v√©rifier le type d'argument attendu.", ephemeral=True)
    elif isinstance(error, commands.CheckFailure):
        # Si c'est une erreur de permission sp√©cifique (ex: has_permissions)
        if isinstance(error, commands.MissingPermissions):
            perms_needed = ", ".join(error.missing_permissions)
            await ctx.send(f"üö´ Vous n'avez pas les permissions n√©cessaires pour cette commande : `{perms_needed}`.", ephemeral=True)
        elif isinstance(error, commands.NotOwner):
             await ctx.send("üö´ Seul le propri√©taire du bot peut utiliser cette commande.", ephemeral=True)
        else: 
             await ctx.send("üö´ Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
    elif isinstance(error, commands.MemberNotFound):
        await ctx.send("‚ùå Le memebre saisie est invalide verifier L'identifiant !", ephemeral=True)
    elif isinstance(error, discord.Forbidden):
        await ctx.send("üö´ DIDI N'as pas la permitiondefaire cela !", ephemeral=False) 
    else:
        print(f"Ignorer l'exception dans la commande {ctx.command} :", error)
        await ctx.send(f"Une erreur inattendue est survenue : {error}", ephemeral=True)
        log_action("command_error", bot.user, ctx.author, details=str(error))

# --- Ex√©cuter le bot ---
if TOKEN is None:
    print("Erreur : Vous devez entrer votre token dans le fichier .env !")
else:
    try:
        bot.run(TOKEN)
    except discord.LoginFailure:
        print("Erreur de connexion : Verifier le token present dans le fichier .env !.")
    except Exception as e:
        print(f"Une erreur inattendue est survenue au d√©marrage du bot : {e}")
